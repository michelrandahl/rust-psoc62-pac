# [doc = "Register `CQTCLR` reader"] pub type R = crate :: R < CQTCLR_SPEC > ; # [doc = "Register `CQTCLR` writer"] pub type W = crate :: W < CQTCLR_SPEC > ; # [doc = "Field `TCLR` reader - Writing 1 to bit n of this register orders CQE to clear a task that the software has previously issued. This bit can only be written when CQE is in Halt state as indicated in CQCFG register Halt bit. When software writes 1 to a bit in this register, CQE updates the value to 1, and starts clearing the data structures related to the task. CQE clears the bit fields (sets a value of 0) in CQTCLR and in CQTDBR once the clear operation is complete. Software must poll on the CQTCLR until it is cleared to verify that a clear operation was done."] pub type TCLR_R = crate :: FieldReader < u32 > ; # [doc = "Field `TCLR` writer - Writing 1 to bit n of this register orders CQE to clear a task that the software has previously issued. This bit can only be written when CQE is in Halt state as indicated in CQCFG register Halt bit. When software writes 1 to a bit in this register, CQE updates the value to 1, and starts clearing the data structures related to the task. CQE clears the bit fields (sets a value of 0) in CQTCLR and in CQTDBR once the clear operation is complete. Software must poll on the CQTCLR until it is cleared to verify that a clear operation was done."] pub type TCLR_W < 'a , REG > = crate :: FieldWriter < 'a , REG , 32 , u32 > ; impl R { # [doc = "Bits 0:31 - Writing 1 to bit n of this register orders CQE to clear a task that the software has previously issued. This bit can only be written when CQE is in Halt state as indicated in CQCFG register Halt bit. When software writes 1 to a bit in this register, CQE updates the value to 1, and starts clearing the data structures related to the task. CQE clears the bit fields (sets a value of 0) in CQTCLR and in CQTDBR once the clear operation is complete. Software must poll on the CQTCLR until it is cleared to verify that a clear operation was done."] # [inline (always)] pub fn tclr (& self) -> TCLR_R { TCLR_R :: new (self . bits) } } impl W { # [doc = "Bits 0:31 - Writing 1 to bit n of this register orders CQE to clear a task that the software has previously issued. This bit can only be written when CQE is in Halt state as indicated in CQCFG register Halt bit. When software writes 1 to a bit in this register, CQE updates the value to 1, and starts clearing the data structures related to the task. CQE clears the bit fields (sets a value of 0) in CQTCLR and in CQTDBR once the clear operation is complete. Software must poll on the CQTCLR until it is cleared to verify that a clear operation was done."] # [inline (always)] # [must_use] pub fn tclr (& mut self) -> TCLR_W < CQTCLR_SPEC > { TCLR_W :: new (self , 0) } # [doc = r" Writes raw bits to the register."] # [doc = r""] # [doc = r" # Safety"] # [doc = r""] # [doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"] # [inline (always)] pub unsafe fn bits (& mut self , bits : u32) -> & mut Self { self . bits = bits ; self } } # [doc = "Command Queuing DoorBell register\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`cqtclr::R`](R).  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`cqtclr::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct CQTCLR_SPEC ; impl crate :: RegisterSpec for CQTCLR_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [`cqtclr::R`](R) reader structure"] impl crate :: Readable for CQTCLR_SPEC { } # [doc = "`write(|w| ..)` method takes [`cqtclr::W`](W) writer structure"] impl crate :: Writable for CQTCLR_SPEC { const ZERO_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; const ONE_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; } # [doc = "`reset()` method sets CQTCLR to value 0"] impl crate :: Resettable for CQTCLR_SPEC { const RESET_VALUE : Self :: Ux = 0 ; }