# [doc = r"Register block"] # [repr (C)] pub struct CNT_STRUCT { ctl : CTL , _reserved1 : [u8 ; 0x04] , cnt : CNT , } impl CNT_STRUCT { # [doc = "0x00 - Profile counter configuration"] # [inline (always)] pub const fn ctl (& self) -> & CTL { & self . ctl } # [doc = "0x08 - Profile counter value"] # [inline (always)] pub const fn cnt (& self) -> & CNT { & self . cnt } } # [doc = "CTL (rw) register accessor: Profile counter configuration\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`ctl::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`ctl::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ctl`]
module"] pub type CTL = crate :: Reg < ctl :: CTL_SPEC > ; # [doc = "Profile counter configuration"] pub mod ctl ; # [doc = "CNT (rw) register accessor: Profile counter value\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`cnt::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`cnt::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@cnt`]
module"] pub type CNT = crate :: Reg < cnt :: CNT_SPEC > ; # [doc = "Profile counter value"] pub mod cnt ;