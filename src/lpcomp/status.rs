# [doc = "Register `STATUS` reader"] pub type R = crate :: R < STATUS_SPEC > ; # [doc = "Field `OUT0` reader - Current output value of the comparator 0."] pub type OUT0_R = crate :: BitReader ; # [doc = "Field `OUT1` reader - Current output value of the comparator 1."] pub type OUT1_R = crate :: BitReader ; impl R { # [doc = "Bit 0 - Current output value of the comparator 0."] # [inline (always)] pub fn out0 (& self) -> OUT0_R { OUT0_R :: new ((self . bits & 1) != 0) } # [doc = "Bit 16 - Current output value of the comparator 1."] # [inline (always)] pub fn out1 (& self) -> OUT1_R { OUT1_R :: new (((self . bits >> 16) & 1) != 0) } } # [doc = "LPCOMP Status Register\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`status::R`](R).  See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct STATUS_SPEC ; impl crate :: RegisterSpec for STATUS_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [`status::R`](R) reader structure"] impl crate :: Readable for STATUS_SPEC { } # [doc = "`reset()` method sets STATUS to value 0"] impl crate :: Resettable for STATUS_SPEC { const RESET_VALUE : Self :: Ux = 0 ; }