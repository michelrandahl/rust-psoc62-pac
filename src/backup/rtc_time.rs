# [doc = "Register `RTC_TIME` reader"] pub type R = crate :: R < RTC_TIME_SPEC > ; # [doc = "Register `RTC_TIME` writer"] pub type W = crate :: W < RTC_TIME_SPEC > ; # [doc = "Field `RTC_SEC` reader - Calendar seconds in BCD, 0-59"] pub type RTC_SEC_R = crate :: FieldReader ; # [doc = "Field `RTC_SEC` writer - Calendar seconds in BCD, 0-59"] pub type RTC_SEC_W < 'a , REG > = crate :: FieldWriter < 'a , REG , 7 > ; # [doc = "Field `RTC_MIN` reader - Calendar minutes in BCD, 0-59"] pub type RTC_MIN_R = crate :: FieldReader ; # [doc = "Field `RTC_MIN` writer - Calendar minutes in BCD, 0-59"] pub type RTC_MIN_W < 'a , REG > = crate :: FieldWriter < 'a , REG , 7 > ; # [doc = "Field `RTC_HOUR` reader - Calendar hours in BCD, value depending on 12/24HR mode 0=24HR: \\[21:16\\]=0-23 1=12HR: \\[21\\]:0=AM, 1=PM, \\[20:16\\]=1-12"] pub type RTC_HOUR_R = crate :: FieldReader ; # [doc = "Field `RTC_HOUR` writer - Calendar hours in BCD, value depending on 12/24HR mode 0=24HR: \\[21:16\\]=0-23 1=12HR: \\[21\\]:0=AM, 1=PM, \\[20:16\\]=1-12"] pub type RTC_HOUR_W < 'a , REG > = crate :: FieldWriter < 'a , REG , 6 > ; # [doc = "Field `CTRL_12HR` reader - Select 12/24HR mode: 1=12HR, 0=24HR"] pub type CTRL_12HR_R = crate :: BitReader ; # [doc = "Field `CTRL_12HR` writer - Select 12/24HR mode: 1=12HR, 0=24HR"] pub type CTRL_12HR_W < 'a , REG > = crate :: BitWriter < 'a , REG > ; # [doc = "Field `RTC_DAY` reader - Calendar Day of the week in BCD, 1-7 It is up to the user to define the meaning of the values, but 1=Monday is recommended"] pub type RTC_DAY_R = crate :: FieldReader ; # [doc = "Field `RTC_DAY` writer - Calendar Day of the week in BCD, 1-7 It is up to the user to define the meaning of the values, but 1=Monday is recommended"] pub type RTC_DAY_W < 'a , REG > = crate :: FieldWriter < 'a , REG , 3 > ; impl R { # [doc = "Bits 0:6 - Calendar seconds in BCD, 0-59"] # [inline (always)] pub fn rtc_sec (& self) -> RTC_SEC_R { RTC_SEC_R :: new ((self . bits & 0x7f) as u8) } # [doc = "Bits 8:14 - Calendar minutes in BCD, 0-59"] # [inline (always)] pub fn rtc_min (& self) -> RTC_MIN_R { RTC_MIN_R :: new (((self . bits >> 8) & 0x7f) as u8) } # [doc = "Bits 16:21 - Calendar hours in BCD, value depending on 12/24HR mode 0=24HR: \\[21:16\\]=0-23 1=12HR: \\[21\\]:0=AM, 1=PM, \\[20:16\\]=1-12"] # [inline (always)] pub fn rtc_hour (& self) -> RTC_HOUR_R { RTC_HOUR_R :: new (((self . bits >> 16) & 0x3f) as u8) } # [doc = "Bit 22 - Select 12/24HR mode: 1=12HR, 0=24HR"] # [inline (always)] pub fn ctrl_12hr (& self) -> CTRL_12HR_R { CTRL_12HR_R :: new (((self . bits >> 22) & 1) != 0) } # [doc = "Bits 24:26 - Calendar Day of the week in BCD, 1-7 It is up to the user to define the meaning of the values, but 1=Monday is recommended"] # [inline (always)] pub fn rtc_day (& self) -> RTC_DAY_R { RTC_DAY_R :: new (((self . bits >> 24) & 7) as u8) } } impl W { # [doc = "Bits 0:6 - Calendar seconds in BCD, 0-59"] # [inline (always)] # [must_use] pub fn rtc_sec (& mut self) -> RTC_SEC_W < RTC_TIME_SPEC > { RTC_SEC_W :: new (self , 0) } # [doc = "Bits 8:14 - Calendar minutes in BCD, 0-59"] # [inline (always)] # [must_use] pub fn rtc_min (& mut self) -> RTC_MIN_W < RTC_TIME_SPEC > { RTC_MIN_W :: new (self , 8) } # [doc = "Bits 16:21 - Calendar hours in BCD, value depending on 12/24HR mode 0=24HR: \\[21:16\\]=0-23 1=12HR: \\[21\\]:0=AM, 1=PM, \\[20:16\\]=1-12"] # [inline (always)] # [must_use] pub fn rtc_hour (& mut self) -> RTC_HOUR_W < RTC_TIME_SPEC > { RTC_HOUR_W :: new (self , 16) } # [doc = "Bit 22 - Select 12/24HR mode: 1=12HR, 0=24HR"] # [inline (always)] # [must_use] pub fn ctrl_12hr (& mut self) -> CTRL_12HR_W < RTC_TIME_SPEC > { CTRL_12HR_W :: new (self , 22) } # [doc = "Bits 24:26 - Calendar Day of the week in BCD, 1-7 It is up to the user to define the meaning of the values, but 1=Monday is recommended"] # [inline (always)] # [must_use] pub fn rtc_day (& mut self) -> RTC_DAY_W < RTC_TIME_SPEC > { RTC_DAY_W :: new (self , 24) } # [doc = r" Writes raw bits to the register."] # [doc = r""] # [doc = r" # Safety"] # [doc = r""] # [doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"] # [inline (always)] pub unsafe fn bits (& mut self , bits : u32) -> & mut Self { self . bits = bits ; self } } # [doc = "Calendar Seconds, Minutes, Hours, Day of Week\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`rtc_time::R`](R).  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`rtc_time::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct RTC_TIME_SPEC ; impl crate :: RegisterSpec for RTC_TIME_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [`rtc_time::R`](R) reader structure"] impl crate :: Readable for RTC_TIME_SPEC { } # [doc = "`write(|w| ..)` method takes [`rtc_time::W`](W) writer structure"] impl crate :: Writable for RTC_TIME_SPEC { const ZERO_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; const ONE_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; } # [doc = "`reset()` method sets RTC_TIME to value 0"] impl crate :: Resettable for RTC_TIME_SPEC { const RESET_VALUE : Self :: Ux = 0 ; }